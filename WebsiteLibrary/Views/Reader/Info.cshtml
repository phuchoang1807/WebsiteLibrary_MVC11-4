@model WebsiteLibrary.Models.Entities.Reader

@{
    ViewBag.Title = "Thông tin cá nhân";
    Layout = "~/Views/Shared/_LayoutReader.cshtml";
}

<div class="library-main-section">
    <div class="library-main-wrapper">
        <div class="library-sidebar">
            <ul class="library-nav-menu">
                <li class="library-nav-item active" data-target="library-personal-content">Thông Tin Cá Nhân</li>
                <li class="library-nav-separator"></li>
                <li class="library-nav-item" data-target="library-card-content">Thông Tin Thẻ Thư Viện</li>
            </ul>
        </div>

        <div class="library-content-area">
            @if (Model == null)
            {
                <section id="library-personal-content" class="library-content-section library-personal-section active">
                    <h2 class="library-section-title">Lỗi</h2>
                    <p>Không thể tải thông tin cá nhân. Vui lòng đăng nhập lại hoặc liên hệ quản trị viên.</p>
                </section>
            }
            else
            {
                <section id="library-personal-content" class="library-content-section library-personal-section active">
                    <h2 class="library-section-title">Thông Tin Cá Nhân</h2>
                    <div class="library-info-list">
                        <div class="library-info-item">
                            <label class="library-info-label">Mã độc giả:</label>
                            <span class="library-info-value">@Model.ID</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Họ và tên:</label>
                            <span class="library-info-value">@Model.Name</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Ngày sinh:</label>
                            <span class="library-info-value">@Model.DateOfBirth.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Giới tính:</label>
                            <span class="library-info-value">@Model.Gender</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Số điện thoại:</label>
                            <span class="library-info-value">@Model.PhoneNumber</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Email:</label>
                            <span class="library-info-value">@Model.Email</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Trình độ văn hóa:</label>
                            <span class="library-info-value">@Model.EducationLevel</span>
                        </div>
                        <div class="library-info-item">
                            <label class="library-info-label">Địa chỉ:</label>
                            <span class="library-info-value">@Model.Address</span>
                        </div>
                        <div style="display: flex; gap: 10px; margin-top: 20px;">
                            <button class="library-action-button" onclick="showEditReaderPopup()">Chỉnh Sửa</button>
                            <button class="library-action-button" onclick="showChangePasswordPopup()">Đổi Mật Khẩu</button>
                        </div>
                    </div>
                </section>
                <!-- Phần thông tin thẻ thư viện -->
                <section id="library-card-content" class="library-content-section library-card-section">
                    <h2 class="library-section-title">Thông Tin Thẻ Thư Viện</h2>
                    <!-- Nội dung khi đã có thẻ (được duyệt) -->
                    <div class="library-card-registered" style="display: none;">
                        <div class="library-card-grid">
                            <div class="library-card-image">
                                <img id="cardPhoto" src="/images/Ảnh thẻ.jpg" alt="Ảnh thẻ 3x4" class="library-card-photo">
                            </div>
                            <div class="library-card-details">
                                <div class="library-card-info">
                                    <div class="library-card-row">
                                        <label class="library-info-label">Mã Thẻ:</label>
                                        <span class="library-info-value" id="cardId"></span>
                                    </div>
                                    <div class="library-card-row">
                                        <label class="library-info-label">Thời Gian Thẻ:</label>
                                        <div class="card-time-options" id="timeOptions">
                                            <!-- Năm sẽ được thêm động bằng JavaScript -->
                                        </div>
                                    </div>
                                    <div class="library-card-row">
                                        <label class="library-info-label">Tình Trạng Thẻ:</label>
                                        <span class="library-info-value card-status-item" id="cardStatus">
                                            <span class="status-circle"></span>
                                            <span class="status-text"></span>
                                        </span>
                                    </div>
                                </div>
                                <button class="library-renew-button" onclick="window.location.href='/Reader/RenewCard'">
                                    <span class="renew-icon"></span> Gia Hạn Thẻ
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- Nội dung khi có yêu cầu đang chờ duyệt -->
                    <div class="library-card-pending" style="display: none;">
                        <div class="library-card-message pending-message">
                            <p class="library-card-message-line1"><i class="fas fa-clock pending-icon"></i> Yêu cầu tạo thẻ thư viện đã được gửi và đang chờ xác nhận.</p>
                            <p class="library-card-message-line2">Vui lòng chờ thủ thư phê duyệt.</p>
                        </div>
                    </div>
                    <!-- Nội dung khi chưa đăng ký thẻ -->
                    <div class="library-card-unregistered">
                        <div class="library-card-message">
                            <p class="library-card-message-line1">Oops, bạn chưa đăng ký thẻ</p>
                            <p class="library-card-message-line2">
                                <a href="/Reader/LibraryRegisterCard">Nhấn vào đây để đăng ký thẻ nào!!</a>
                            </p>
                        </div>
                    </div>
                </section>
            }
        </div>
    </div>
</div>

<!-- Popup chỉnh sửa thông tin độc giả -->
<div id="edit-reader-popup" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('edit-reader-popup')">×</span>
        <h2>Chỉnh sửa thông tin cá nhân</h2>
        <div class="form-group">
            <label>Ngày sinh (DD/MM/YYYY) <span class="required">*</span>:</label>
            <input type="text" id="edit-reader-dob" maxlength="10" placeholder="DD/MM/YYYY" required>
        </div>
        <div class="form-group">
            <label>Giới tính <span class="required">*</span>:</label>
            <select id="edit-reader-gender" required>
                <option value="">Chọn giới tính</option>
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
                <option value="Khác">Khác</option>
            </select>
        </div>
        <div class="form-group">
            <label>Số điện thoại <span class="required">*</span>:</label>
            <input type="text" id="edit-reader-phone" maxlength="10" oninput="this.value = this.value.replace(/[^0-9]/g, '')" required>
        </div>
        <div class="form-group">
            <label>Trình độ văn hóa <span class="required">*</span>:</label>
            <select id="edit-reader-education" required>
                <option value="">Chọn trình độ</option>
                <option value="Trung học">Trung học</option>
                <option value="Cao học">Cao học</option>
            </select>
        </div>
        <div class="form-group">
            <label>Địa chỉ <span class="required">*</span>:</label>
            <input type="text" id="edit-reader-address" required>
        </div>
        <div class="modal-actions">
            <button class="btn btn-save" onclick="saveEditedReader()">Xác nhận</button>
            <button class="btn btn-cancel" onclick="closeModal('edit-reader-popup')">Hủy</button>
        </div>
    </div>
</div>

<!-- Popup đổi mật khẩu -->
<div id="change-password-popup" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('change-password-popup')">×</span>
        <h2>Đổi mật khẩu</h2>
        <div class="form-group">
            <label>Mật khẩu cũ <span class="required">*</span>:</label>
            <input type="password" id="old-password" required>
        </div>
        <div class="form-group">
            <label>Mật khẩu mới <span class="required">*</span>:</label>
            <input type="password" id="new-password" required>
        </div>
        <div class="form-group">
            <label>Xác nhận mật khẩu mới <span class="required">*</span>:</label>
            <input type="password" id="confirm-password" required>
        </div>
        <div class="modal-actions">
            <button class="btn btn-save" onclick="changePassword()">Xác nhận</button>
            <button class="btn btn-cancel" onclick="closeModal('change-password-popup')">Hủy</button>
        </div>
    </div>
</div>

<!-- Popup thông báo tùy chỉnh -->
<div id="custom-alert-popup" class="custom-alert" style="display:none;">
    <div class="custom-alert-content">
        <p id="custom-alert-message"></p>
        <button class="btn btn-ok" onclick="closeCustomAlert()">OK</button>
    </div>
</div>
@section Styles {
    <style>
        .library-card-photo {
            width: 150px !important; /* Chiều rộng cố định: 150px */
            height: 200px !important; /* Chiều cao cố định: 200px (tỷ lệ 3x4) */
            object-fit: cover !important; /* Giữ tỷ lệ ảnh, cắt phần thừa */
            border: 1px solid #ddd !important; /* Viền nhẹ để ảnh đẹp hơn */
            border-radius: 5px !important; /* Bo góc nhẹ */
        }
    </style>
}
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script>
        // Logic xử lý trạng thái thẻ thư viện
        document.addEventListener('DOMContentLoaded', () => {
            if (window.location.pathname.toLowerCase() !== '/reader/info') {
                return;
            }
            updateCardStatus(); // Gọi hàm cập nhật trạng thái thẻ khi trang tải
        });

        // Hàm cập nhật trạng thái thẻ
        function updateCardStatus() {
            const registeredDiv = document.querySelector('.library-card-registered');
            const pendingDiv = document.querySelector('.library-card-pending');
            const unregisteredDiv = document.querySelector('.library-card-unregistered');
            const cardIdSpan = document.getElementById('cardId');
            const cardPhotoImg = document.getElementById('cardPhoto');
            const cardStatusSpan = document.getElementById('cardStatus');
            const statusCircle = cardStatusSpan?.querySelector('.status-circle');
            const statusText = cardStatusSpan?.querySelector('.status-text');
            const timeOptionsDiv = document.getElementById('timeOptions');

            fetch('/Reader/CheckCardStatus', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.hasCard) {
                        // Có thẻ chính thức
                        registeredDiv.style.display = 'block';
                        pendingDiv.style.display = 'none';
                        unregisteredDiv.style.display = 'none';
                        cardIdSpan.textContent = data.cardId;

                        fetch('/Reader/GetCardDetails')
                            .then(response => response.json())
                            .then(cardData => {
                                if (cardData.success) {
                                    if (cardData.cardPhotoUrl) {
                                        cardPhotoImg.src = cardData.cardPhotoUrl;
                                    }

                                    // Xử lý trạng thái thẻ
                                    cardStatusSpan.classList.remove('active', 'inactive');
                                    if (cardData.status === 'Đang hoạt động') {
                                        cardStatusSpan.classList.add('active');
                                        statusCircle.innerHTML = '<i class="fas fa-check"></i>';
                                        statusText.textContent = 'Đang hoạt động';
                                    } else if (cardData.status === 'Bị khóa') {
                                        cardStatusSpan.classList.add('inactive');
                                        statusCircle.innerHTML = '<i class="fas fa-times"></i>';
                                        statusText.textContent = 'Bị khóa';
                                    }

                                    const registrationYear = cardData.registrationYear;
                                    const previousYear = registrationYear - 1;
                                    const nextYear = registrationYear + 1;
                                    timeOptionsDiv.innerHTML = `
                                                <span class="card-time-option year-${previousYear}" data-year="${previousYear}">${previousYear}</span>
                                                <span class="card-time-option year-${registrationYear} selected" data-year="${registrationYear}">${registrationYear}</span>
                                                <span class="card-time-option year-${nextYear}" data-year="${nextYear}">${nextYear}</span>
                                            `;
                                }
                            })
                            .catch(error => {
                                console.error('Error fetching card details:', error);
                            });
                    } else if (data.isPending) {
                        // Có yêu cầu đang chờ duyệt
                        registeredDiv.style.display = 'none';
                        pendingDiv.style.display = 'block';
                        unregisteredDiv.style.display = 'none';
                    } else {
                        // Chưa có thẻ lẫn yêu cầu
                        registeredDiv.style.display = 'none';
                        pendingDiv.style.display = 'none';
                        unregisteredDiv.style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error checking card status:', error);
                    registeredDiv.style.display = 'none';
                    pendingDiv.style.display = 'none';
                    unregisteredDiv.style.display = 'block';
                });
        }

        // Xử lý nhấp chuột trên sidebar (giữ nguyên)
        document.querySelectorAll('.library-nav-item').forEach(item => {
            item.addEventListener('click', () => {
                const targetSection = item.getAttribute('data-target');
                document.querySelectorAll('.library-nav-item').forEach(item => item.classList.remove('active'));
                document.querySelectorAll('.library-content-section').forEach(section => section.classList.remove('active'));
                item.classList.add('active');
                document.getElementById(targetSection)?.classList.add('active');
                window.location.hash = targetSection;
            });
        });

        // Xử lý hash khi tải trang (giữ nguyên)
        window.addEventListener('load', () => {
            const hash = window.location.hash.substring(1);
            if (hash) {
                document.querySelectorAll('.library-nav-item').forEach(item => item.classList.remove('active'));
                document.querySelectorAll('.library-content-section').forEach(section => section.classList.remove('active'));
                const targetSection = document.getElementById(hash);
                if (targetSection) {
                    targetSection.classList.add('active');
                    document.querySelector(`.library-nav-item[data-target="${hash}"]`)?.classList.add('active');
                }
            } else {
                document.getElementById('library-personal-content')?.classList.add('active');
                document.querySelector('[data-target="library-personal-content"]')?.classList.add('active');
            }
        });

        window.addEventListener('hashchange', () => {
            const hash = window.location.hash.substring(1);
            if (hash) {
                document.querySelectorAll('.library-nav-item').forEach(item => item.classList.remove('active'));
                document.querySelectorAll('.library-content-section').forEach(section => section.classList.remove('active'));
                const targetSection = document.getElementById(hash);
                if (targetSection) {
                    targetSection.classList.add('active');
                    document.querySelector(`.library-nav-item[data-target="${hash}"]`)?.classList.add('active');
                }
            }
        });

        // Các hàm xử lý thông tin cá nhân (giữ nguyên)
        function showModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'block';
                setTimeout(() => modal.classList.add('show'), 10);
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('show');
                setTimeout(() => modal.style.display = 'none', 300);
            }
        }

        function showCustomAlert(message) {
            const alertPopup = document.getElementById('custom-alert-popup');
            if (alertPopup) {
                document.getElementById('custom-alert-message').textContent = message;
                alertPopup.style.display = 'block';
                setTimeout(() => alertPopup.classList.add('show'), 10);
            }
        }

        function closeCustomAlert() {
            const alertPopup = document.getElementById('custom-alert-popup');
            if (alertPopup) {
                alertPopup.classList.remove('show');
                setTimeout(() => alertPopup.style.display = 'none', 300);
            }
        }

        function isValidDate(dob) {
            const regex = /^\d{2}\/\d{2}\/\d{4}$/;
            if (!regex.test(dob)) return false;

            const [day, month, year] = dob.split('/').map(Number);
            const yearNum = Number(year);
            if (yearNum < 1945 || yearNum > 2015) return false;
            if (day < 1 || day > 31 || month < 1 || month > 12) return false;

            const daysInMonth = new Date(yearNum, month, 0).getDate();
            return day <= daysInMonth;
        }

        function isValidPhone(phone) {
            return phone.length === 10 && /^[0-9]{10}$/.test(phone);
        }

        function showEditReaderPopup() {
            const dob = document.querySelector('.library-info-item:nth-child(3) .library-info-value').textContent;
            const gender = document.querySelector('.library-info-item:nth-child(4) .library-info-value').textContent;
            const phone = document.querySelector('.library-info-item:nth-child(5) .library-info-value').textContent;
            const education = document.querySelector('.library-info-item:nth-child(7) .library-info-value').textContent;
            const address = document.querySelector('.library-info-item:nth-child(8) .library-info-value').textContent;

            document.getElementById('edit-reader-dob').value = dob !== "Không có dữ liệu" ? dob : "";
            document.getElementById('edit-reader-gender').value = gender !== "Không có dữ liệu" ? gender : "";
            document.getElementById('edit-reader-phone').value = phone !== "Không có dữ liệu" ? phone : "";
            document.getElementById('edit-reader-education').value = education !== "Không có dữ liệu" ? education : "";
            document.getElementById('edit-reader-address').value = address !== "Không có dữ liệu" ? address : "";

            showModal('edit-reader-popup');
        }

        async function saveEditedReader() {
            const inputs = document.querySelectorAll('#edit-reader-popup input[required], #edit-reader-popup select[required]');
            let isValid = true;

            inputs.forEach(input => {
                if (!input.value.trim()) {
                    isValid = false;
                    input.style.borderColor = 'red';
                } else {
                    input.style.borderColor = '';
                }
            });

            if (!isValid) {
                showCustomAlert('Vui lòng điền đầy đủ thông tin bắt buộc!');
                return;
            }

            const dob = document.getElementById('edit-reader-dob').value;
            if (!isValidDate(dob)) {
                showCustomAlert('Ngày sinh không hợp lệ! Định dạng phải là DD/MM/YYYY và năm từ 1945 đến 2015.');
                document.getElementById('edit-reader-dob').style.borderColor = 'red';
                return;
            }

            const phone = document.getElementById('edit-reader-phone').value;
            if (!isValidPhone(phone)) {
                showCustomAlert('Số điện thoại phải có đúng 10 số!');
                document.getElementById('edit-reader-phone').style.borderColor = 'red';
                return;
            }

            const updatedReader = {
                dateOfBirth: dob.split('/').reverse().join('-'),
                gender: document.getElementById('edit-reader-gender').value,
                phoneNumber: phone,
                educationLevel: document.getElementById('edit-reader-education').value,
                address: document.getElementById('edit-reader-address').value
            };

            try {
                const response = await fetch('/Reader/EditInfo', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updatedReader)
                });
                const result = await response.json();

                if (result.success) {
                    document.querySelector('.library-info-item:nth-child(3) .library-info-value').textContent = dob;
                    document.querySelector('.library-info-item:nth-child(4) .library-info-value').textContent = updatedReader.gender;
                    document.querySelector('.library-info-item:nth-child(5) .library-info-value').textContent = updatedReader.phoneNumber;
                    document.querySelector('.library-info-item:nth-child(7) .library-info-value').textContent = updatedReader.educationLevel;
                    document.querySelector('.library-info-item:nth-child(8) .library-info-value').textContent = updatedReader.address;

                    closeModal('edit-reader-popup');
                    showCustomAlert(result.message);
                } else {
                    showCustomAlert(result.message || 'Có lỗi xảy ra khi cập nhật thông tin!');
                }
            } catch (error) {
                showCustomAlert('Lỗi kết nối đến server! Vui lòng thử lại.');
            }
        }

        function showChangePasswordPopup() {
            document.getElementById('old-password').value = '';
            document.getElementById('new-password').value = '';
            document.getElementById('confirm-password').value = '';
            showModal('change-password-popup');
        }

        async function changePassword() {
            const oldPassword = document.getElementById('old-password').value;
            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            if (!oldPassword || !newPassword || !confirmPassword) {
                showCustomAlert('Vui lòng điền đầy đủ các trường!');
                return;
            }

            if (newPassword !== confirmPassword) {
                showCustomAlert('Mật khẩu mới và xác nhận mật khẩu không khớp!');
                document.getElementById('new-password').style.borderColor = 'red';
                document.getElementById('confirm-password').style.borderColor = 'red';
                return;
            }

            if (newPassword.length < 6) {
                showCustomAlert('Mật khẩu mới phải có ít nhất 6 ký tự!');
                document.getElementById('new-password').style.borderColor = 'red';
                return;
            }

            const passwordData = {
                oldPassword: oldPassword,
                newPassword: newPassword
            };

            try {
                const response = await fetch('/Reader/ChangePassword', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(passwordData)
                });
                const result = await response.json();

                if (result.success) {
                    closeModal('change-password-popup');
                    showCustomAlert(result.message);
                } else {
                    showCustomAlert(result.message || 'Có lỗi xảy ra khi đổi mật khẩu!');
                }
            } catch (error) {
                showCustomAlert('Lỗi kết nối đến server! Vui lòng thử lại.');
            }
        }

        window.onclick = function (event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    closeModal(modal.id);
                }
            });

            const alertPopup = document.getElementById('custom-alert-popup');
            if (event.target === alertPopup) {
                closeCustomAlert();
            }
        };
    </script>
}
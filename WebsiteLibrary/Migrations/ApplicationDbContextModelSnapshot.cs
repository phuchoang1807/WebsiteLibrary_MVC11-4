// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebsiteLibrary.Data;

#nullable disable

namespace WebsiteLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Account", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("ID");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Role").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Book", b =>
                {
                    b.Property<string>("OriginalBookID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalBookTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OriginalBookID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BookCopy", b =>
                {
                    b.Property<Guid>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalBookID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("BookID");

                    b.HasIndex("OriginalBookID");

                    b.ToTable("BookCopies");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BorrowingSlip", b =>
                {
                    b.Property<Guid>("BorrowingSlipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BorrowDuration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReaderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BorrowingSlipID");

                    b.HasIndex("CardID");

                    b.HasIndex("ReaderID");

                    b.ToTable("BorrowingSlips");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BorrowingSlipDetail", b =>
                {
                    b.Property<Guid>("BorrowingSlipId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("BookCopyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("BookCopyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowingSlipFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.HasKey("BorrowingSlipId", "BookCopyId");

                    b.HasIndex("BookCopyFK");

                    b.HasIndex("BorrowingSlipFK");

                    b.ToTable("BorrowingSlipDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.CardRenewal", b =>
                {
                    b.Property<string>("RenewalID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("NewExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RenewalID");

                    b.HasIndex("CardID");

                    b.ToTable("CardRenewals");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ImportDetail", b =>
                {
                    b.Property<Guid>("ImportReceiptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("OriginalBookId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ImportReceiptFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginalBookFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ImportReceiptId", "OriginalBookId");

                    b.HasIndex("ImportReceiptFK");

                    b.HasIndex("OriginalBookFK");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ImportReceipt", b =>
                {
                    b.Property<Guid>("ImportReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImportReceiptID");

                    b.ToTable("ImportReceipts");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LibraryCard", b =>
                {
                    b.Property<string>("CardID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardPhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardID");

                    b.HasIndex("ID");

                    b.ToTable("LibraryCards");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LibraryCardRequest", b =>
                {
                    b.Property<string>("RequestID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardPhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReaderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestID");

                    b.HasIndex("AccountID");

                    b.ToTable("LibraryCardRequests");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LoanRequest", b =>
                {
                    b.Property<Guid>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.ToTable("LoanRequests");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LoanRequestDetail", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("BookCopyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("BookCopyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId", "BookCopyId");

                    b.HasIndex("BookCopyFK");

                    b.HasIndex("RequestFK");

                    b.ToTable("LoanRequestDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CardID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.HasIndex("CardID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ReturnSlip", b =>
                {
                    b.Property<Guid>("ReturnSlipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowingSlipID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReturnSlipID");

                    b.HasIndex("BorrowingSlipID");

                    b.ToTable("ReturnSlips");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ReturnSlipDetail", b =>
                {
                    b.Property<Guid>("ReturnSlipId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("BookCopyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<Guid>("ReturnSlipFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReturnSlipId", "BookId");

                    b.HasIndex("BookCopyFK");

                    b.HasIndex("ReturnSlipFK");

                    b.ToTable("ReturnSlipDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Librarian", b =>
                {
                    b.HasBaseType("WebsiteLibrary.Models.Entities.Account");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Reader", b =>
                {
                    b.HasBaseType("WebsiteLibrary.Models.Entities.Account");

                    b.Property<string>("ReaderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Reader");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BookCopy", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.Book", "Book")
                        .WithMany("BookCopies")
                        .HasForeignKey("OriginalBookID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BorrowingSlip", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteLibrary.Models.Entities.Reader", null)
                        .WithMany("BorrowingSlips")
                        .HasForeignKey("ReaderID");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BorrowingSlipDetail", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.BookCopy", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteLibrary.Models.Entities.BorrowingSlip", "BorrowingSlip")
                        .WithMany("BorrowingSlipDetails")
                        .HasForeignKey("BorrowingSlipFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("BorrowingSlip");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.CardRenewal", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ImportDetail", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.ImportReceipt", "ImportReceipt")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportReceiptFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteLibrary.Models.Entities.Book", "Book")
                        .WithMany("ImportDetails")
                        .HasForeignKey("OriginalBookFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ImportReceipt");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LibraryCard", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.Reader", "Reader")
                        .WithMany("LibraryCards")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LibraryCardRequest", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LoanRequestDetail", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.BookCopy", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteLibrary.Models.Entities.LoanRequest", "LoanRequest")
                        .WithMany("LoanRequestDetails")
                        .HasForeignKey("RequestFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("LoanRequest");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Payment", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ReturnSlip", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.BorrowingSlip", "BorrowingSlip")
                        .WithMany()
                        .HasForeignKey("BorrowingSlipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowingSlip");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ReturnSlipDetail", b =>
                {
                    b.HasOne("WebsiteLibrary.Models.Entities.BookCopy", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteLibrary.Models.Entities.ReturnSlip", "ReturnSlip")
                        .WithMany("ReturnSlipDetails")
                        .HasForeignKey("ReturnSlipFK")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("ReturnSlip");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Book", b =>
                {
                    b.Navigation("BookCopies");

                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.BorrowingSlip", b =>
                {
                    b.Navigation("BorrowingSlipDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ImportReceipt", b =>
                {
                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.LoanRequest", b =>
                {
                    b.Navigation("LoanRequestDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.ReturnSlip", b =>
                {
                    b.Navigation("ReturnSlipDetails");
                });

            modelBuilder.Entity("WebsiteLibrary.Models.Entities.Reader", b =>
                {
                    b.Navigation("BorrowingSlips");

                    b.Navigation("LibraryCards");
                });
#pragma warning restore 612, 618
        }
    }
}
